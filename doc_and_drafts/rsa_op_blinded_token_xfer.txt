


*** THIS IS WORK IN PROGRESS, obviously will contain mistakes and typos for now. ****


Anonymous Cash, online cash transfer
==================

STEP_0: Bank has a Nym (pub id) and a separate key only for minting coins (signing coins)
STEP_1: Alice: buys 1 token from Bank, when she sends bitcoins
STEP_2: Alice: gives 1 token to Dave
STEP_3: Dave: returns 1 token to Bank, and then he receives bitcoins

==================

Bank has a Mint, public RSA key. We know of course it's n parameter.
All math unless noted otherwise is in body of Mint - in mod n arithmentics, where n is from public key of Mint.

Alice wants to give coin to Dave know by his Pubkey.
Dave creates coin message m2, and blinding factor r and r' (r*r'=1), gives that to Alice (when authenticated to her).
Alice tells Bank to reserve a coin with hash h1 that is h(m1) and to reissue it to m2.  m1 is her current coin. 
Bank signs that he agreed.
Alice shows Bank the m1.
Bank seems h(m1) == h1 he reserved, so he signs m2 and sends to Alice and she sends to Dave.
TODO: attacks here, on each step by anyone (coin-marking, info-leak, refuse-to-use-coin, etc)

==================

STEP_0:

Bank:
RSA priv key for the bank main nym: φ(n_b0), d_b0
RSA pub  key for the bank main nym: n_b0, e_b0

This Nym n_b0, e_b0 invests into gaining trust of the users, it is bad for him if he would be proven to cheat with it.

Minting key (signature key)
RSA priv key for tokens1: φ(n_b), d_b 
RSA pub  key for tokens1: n_b, e_b
Only for signing! Never decrypt anything with this (except prove of honest minting key).

Bank publishes n_b0, e_b0 , n_b, e_b

==================

STEP_1:

TODO

==================

STEP_2:

Dave:
RSA priv key: φ(n_d), d_d
RSA pub  key: n_d,e_d

r_d - random number ("blinding factor")
m_d - random number ("the serial number")/
m'_d = m_d*r_d^e_b - a "coin-envelope", that is: blinded (for Bank), unsigned yet coin of Dave

t_d1: text "I will do <something>, if Bank (n_b,e_b) will sign me my coin-envelope m'_d "+{PAD}
s(t_d1) = t_d1^d_e - signed above message

Alice:
RSA priv key: φ(n_a), d_a
RSA pub  key: n_a, e_a

r_a - random number ("blinding factor")
m_a - random number ("the serial number")
h_a - hash(m_a)

t_a1: "Bank, I am holder of your coin h_a, please reissue this coin into m'_d envelope"
Above text is NOT signed. Is only encrypted for the communication purpose to the Bank main nym.
Alice ---> Bank sends: t_a1 ^ e_b0
Bank decrypts and has t_a1 including h_a, m'_d

If coin was marked as spent, spent[ h_a ] == 1, then bank replies (encrypted) "nope, coin is spent".  {and dispute...}
else, the bank proceeds:
{or bank cheats and does nothing} - the same as in general case of bank not accepting a coin and lying that it was spent.
[TODO]
[TODO: does knowledge of h_a - hash of the coin serial number not allow to later lie about it being already spent?]

Bank proceeds:
Bank says, signed message with d_b0: "Ok I will sign a coin m'_d, if  someone shows me the m that matches h_a, that is serial number that is signed by me (is valid coin) [for next X hours]"
bank will for X hours put the coin on list of blocked coins.

bank signs blinded coin for Dave:
s_b(m'_d) = m'_d ^ d_b 
and sends that to Eve who sends it to Dave, or publishes it somehow

Dave unblinds:
s_b(m'_d)       ^ (r_d^-1) =
... TODO (normal unblinding) ...
= m_d ^ d_b







